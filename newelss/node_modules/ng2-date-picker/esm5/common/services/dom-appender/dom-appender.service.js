/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var DomHelper = /** @class */ (function () {
    function DomHelper() {
    }
    /**
     * @private
     * @param {?} element
     * @param {?} container
     * @param {?} anchor
     * @param {?} drops
     * @return {?}
     */
    DomHelper.setYAxisPosition = /**
     * @private
     * @param {?} element
     * @param {?} container
     * @param {?} anchor
     * @param {?} drops
     * @return {?}
     */
    function (element, container, anchor, drops) {
        /** @type {?} */
        var anchorRect = anchor.getBoundingClientRect();
        /** @type {?} */
        var containerRect = container.getBoundingClientRect();
        /** @type {?} */
        var bottom = anchorRect.bottom - containerRect.top;
        /** @type {?} */
        var top = anchorRect.top - containerRect.top;
        if (drops === 'down') {
            element.style.top = (bottom + 1 + 'px');
        }
        else {
            element.style.top = (top - 1 - element.scrollHeight) + 'px';
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} container
     * @param {?} anchor
     * @param {?} dimElem
     * @param {?} opens
     * @return {?}
     */
    DomHelper.setXAxisPosition = /**
     * @private
     * @param {?} element
     * @param {?} container
     * @param {?} anchor
     * @param {?} dimElem
     * @param {?} opens
     * @return {?}
     */
    function (element, container, anchor, dimElem, opens) {
        /** @type {?} */
        var anchorRect = anchor.getBoundingClientRect();
        /** @type {?} */
        var containerRect = container.getBoundingClientRect();
        /** @type {?} */
        var left = anchorRect.left - containerRect.left;
        if (opens === 'right') {
            element.style.left = left + 'px';
        }
        else {
            element.style.left = left - dimElem.offsetWidth + anchor.offsetWidth + 'px';
        }
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    DomHelper.isTopInView = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var top = el.getBoundingClientRect().top;
        return (top >= 0);
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    DomHelper.isBottomInView = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var bottom = el.getBoundingClientRect().bottom;
        return (bottom <= window.innerHeight);
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    DomHelper.isLeftInView = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var left = el.getBoundingClientRect().left;
        return (left >= 0);
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    DomHelper.isRightInView = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var right = el.getBoundingClientRect().right;
        return (right <= window.innerWidth);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    DomHelper.prototype.appendElementToPosition = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        var container = config.container, element = config.element;
        if (!container.style.position || container.style.position === 'static') {
            container.style.position = 'relative';
        }
        if (element.style.position !== 'absolute') {
            element.style.position = 'absolute';
        }
        element.style.visibility = 'hidden';
        setTimeout(function () {
            _this.setElementPosition(config);
            element.style.visibility = 'visible';
        });
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    DomHelper.prototype.setElementPosition = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var element = _a.element, container = _a.container, anchor = _a.anchor, dimElem = _a.dimElem, drops = _a.drops, opens = _a.opens;
        DomHelper.setYAxisPosition(element, container, anchor, 'down');
        DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');
        if (drops !== 'down' && drops !== 'up') {
            if (DomHelper.isBottomInView(dimElem)) {
                DomHelper.setYAxisPosition(element, container, anchor, 'down');
            }
            else if (DomHelper.isTopInView(dimElem)) {
                DomHelper.setYAxisPosition(element, container, anchor, 'up');
            }
        }
        else {
            DomHelper.setYAxisPosition(element, container, anchor, drops);
        }
        if (opens !== 'left' && opens !== 'right') {
            if (DomHelper.isRightInView(dimElem)) {
                DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');
            }
            else if (DomHelper.isLeftInView(dimElem)) {
                DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'left');
            }
        }
        else {
            DomHelper.setXAxisPosition(element, container, anchor, dimElem, opens);
        }
    };
    DomHelper.decorators = [
        { type: Injectable }
    ];
    return DomHelper;
}());
export { DomHelper };
/**
 * @record
 */
export function IAppendToArgs() { }
if (false) {
    /** @type {?} */
    IAppendToArgs.prototype.container;
    /** @type {?} */
    IAppendToArgs.prototype.element;
    /** @type {?} */
    IAppendToArgs.prototype.anchor;
    /** @type {?} */
    IAppendToArgs.prototype.dimElem;
    /** @type {?} */
    IAppendToArgs.prototype.drops;
    /** @type {?} */
    IAppendToArgs.prototype.opens;
}
//# sourceMappingURL=data:application/json;base64,